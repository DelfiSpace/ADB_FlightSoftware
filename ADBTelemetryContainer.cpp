//File Generated By TelemetryFromXTCE.py

#include "ADBTelemetryContainer.h"

int ADBTelemetryContainer::size()
{
    return ADB_CONTAINER_SIZE;
}

unsigned char* ADBTelemetryContainer::getArray()
{
    return &telemetry[0];
}

unsigned long ADBTelemetryContainer::getUptime()
{
    unsigned long ulong;
    ((unsigned char *)&ulong)[3] = telemetry[0];
    ((unsigned char *)&ulong)[2] = telemetry[1];
    ((unsigned char *)&ulong)[1] = telemetry[2];
    ((unsigned char *)&ulong)[0] = telemetry[3];
    return ulong;
}
void ADBTelemetryContainer::setUptime(unsigned long ulong)
{
    telemetry[0] = ((unsigned char *)&ulong)[3];
    telemetry[1] = ((unsigned char *)&ulong)[2];
    telemetry[2] = ((unsigned char *)&ulong)[1];
    telemetry[3] = ((unsigned char *)&ulong)[0];
}
short ADBTelemetryContainer::getBootCounter()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[4];
    ((unsigned char *)&ushort)[0] = telemetry[5];
    return ushort;
}
void ADBTelemetryContainer::setBootCounter(short ushort)
{
    telemetry[4] = ((unsigned char *)&ushort)[1];
    telemetry[5] = ((unsigned char *)&ushort)[0];
}
char ADBTelemetryContainer::getSoftwareBootCounter()
{
    return telemetry[6];
}
void ADBTelemetryContainer::setSoftwareBootCounter(char uchar)
{
    telemetry[6] = uchar;
}
bool ADBTelemetryContainer::getADB_INA_Status()
{
    return ((telemetry[7] & 0x02) != 0);
}
void ADBTelemetryContainer::setADB_INA_Status(bool bval)
{
    telemetry[7] &= (~0x02);
    telemetry[7] |= bval ? 0x02 : 0x00;
}
bool ADBTelemetryContainer::getADB_TMP_Status()
{
    return ((telemetry[7] & 0x01) != 0);
}
void ADBTelemetryContainer::setADB_TMP_Status(bool bval)
{
    telemetry[7] &= (~0x01);
    telemetry[7] |= bval ? 0x01 : 0x00;
}
short ADBTelemetryContainer::getADBCurrent()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[8];
    ((unsigned char *)&ushort)[0] = telemetry[9];
    return ushort;
}
void ADBTelemetryContainer::setADBCurrent(short ushort)
{
    telemetry[8] = ((unsigned char *)&ushort)[1];
    telemetry[9] = ((unsigned char *)&ushort)[0];
}
short ADBTelemetryContainer::getADBVoltage()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[10];
    ((unsigned char *)&ushort)[0] = telemetry[11];
    return ushort;
}
void ADBTelemetryContainer::setADBVoltage(short ushort)
{
    telemetry[10] = ((unsigned char *)&ushort)[1];
    telemetry[11] = ((unsigned char *)&ushort)[0];
}
short ADBTelemetryContainer::getADBTemperature()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[12];
    ((unsigned char *)&ushort)[0] = telemetry[13];
    return ushort;
}
void ADBTelemetryContainer::setADBTemperature(short ushort)
{
    telemetry[12] = ((unsigned char *)&ushort)[1];
    telemetry[13] = ((unsigned char *)&ushort)[0];
}
short ADBTelemetryContainer::getMCUTemp()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[14];
    ((unsigned char *)&ushort)[0] = telemetry[15];
    return ushort;
}
void ADBTelemetryContainer::setMCUTemp(short ushort)
{
    telemetry[14] = ((unsigned char *)&ushort)[1];
    telemetry[15] = ((unsigned char *)&ushort)[0];
}
